package main

import (
	"contest_notcoin/db"
	"contest_notcoin/megacache"
	"context"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"os"
	"strconv"
	"sync/atomic"
	"time"

	"github.com/google/uuid"
)

type ServerInstance struct {
	server           *db.Server
	checkoutRepo     *db.CheckoutRepository
	batchInserter    *db.BatchInserter
	saleItemsRepo    *db.SaleItemsRepository
	batchPurchase    *db.BatchPurchaseUpdater
	cache            *megacache.Megacache
	saleID           int64
	httpServer       *http.Server
	isAcceptingReqs  int32 // atomic boolean
	shutdownComplete chan struct{}
	dbHost           string
}

func init() {
	time.Local = time.UTC
}

var (
	currentInstance atomic.Value // *ServerInstance
)

var dbHost string

func main() {
	dbHost = os.Getenv("DB_HOST")
	if dbHost == "" {
		dbHost = "localhost"
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
	if err := startNewServerInstance(); err != nil {
		log.Fatalf("‚ùå Failed to start initial server instance: %v", err)
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
	setupHourlyRestart()

	// –ë–ª–æ–∫–∏—Ä—É–µ–º main goroutine
	select {}
}

func startNewServerInstance() error {
	log.Println("üöÄ Starting new server instance...")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –ë–î
	config := db.DefaultConfig()
	config.Host = dbHost
	if err := db.InitGlobalServer(config); err != nil {
		return fmt.Errorf("failed to initialize database: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
	instance := &ServerInstance{
		shutdownComplete: make(chan struct{}),
	}

	var err error

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	instance.server = db.GetGlobalServer()
	if instance.server == nil {
		return fmt.Errorf("server is nil")
	}

	instance.saleID, err = instance.server.CreateInitialSale()
	if err != nil {
		return fmt.Errorf("failed to create initial sale: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π checkout
	instance.checkoutRepo, err = db.NewCheckoutRepository(instance.server)
	if err != nil {
		return fmt.Errorf("failed to create checkout repository: %w", err)
	}

	instance.batchInserter = db.NewBatchInserter(instance.checkoutRepo, 100, 50*time.Millisecond)

	instance.saleItemsRepo, err = db.NewSaleItemsRepository(instance.server)
	if err != nil {
		instance.cleanup()
		return fmt.Errorf("failed to create sale items repository: %w", err)
	}

	instance.batchPurchase = db.NewBatchPurchaseUpdater(instance.saleItemsRepo, 10, 10*time.Millisecond)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
	instance.cache = megacache.NewMegacache(10000, 10) // 10000 –ª–æ—Ç–æ–≤, 10 –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	// ===== –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ö–ï–®–ê –ò–ó –ë–î =====
	log.Println("üîÑ Recovering cache from database...")

	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
	recoveryService := db.NewCacheRecoveryService(instance.checkoutRepo, instance.saleItemsRepo)

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–µ—à —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
	if err := recoveryService.RecoverCacheWithSoldItems(ctx, instance.cache, instance.saleID); err != nil {
		instance.cleanup()
		return fmt.Errorf("failed to recover cache: %w", err)
	}

	log.Println("‚úÖ Cache recovery completed successfully")

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–µ–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
	atomic.StoreInt32(&instance.isAcceptingReqs, 1)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞
	mux := http.NewServeMux()
	mux.HandleFunc("/checkout", instance.checkoutHandler)
	mux.HandleFunc("/purchase", instance.purchaseHandler)

	instance.httpServer = &http.Server{
		Addr:    ":8080",
		Handler: mux,
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	if oldInstance := getCurrentInstance(); oldInstance != nil {
		log.Println("üîÑ Stopping previous server instance...")
		go oldInstance.gracefulShutdown()
		// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
		<-oldInstance.shutdownComplete
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
	currentInstance.Store(instance)

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		log.Printf("üåê Server starting on port 8080... Sale ID: %d", instance.saleID)
		if err := instance.httpServer.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Printf("‚ùå HTTP server error: %v", err)
		}
	}()

	return nil
}

func getCurrentInstance() *ServerInstance {
	if instance := currentInstance.Load(); instance != nil {
		return instance.(*ServerInstance)
	}
	return nil
}

func setupHourlyRestart() {
	go func() {
		// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
		now := time.Now()
		nextHour := now.Truncate(time.Hour).Add(time.Hour)
		//nextHour := now.Truncate(time.Minute).Add(time.Minute)
		timeUntilNextHour := nextHour.Sub(now)

		log.Printf("‚è∞ Next restart scheduled at: %s (in %v)", nextHour.Format("15:04:05"), timeUntilNextHour)

		// –ü–µ—Ä–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
		timer := time.NewTimer(timeUntilNextHour)

		for {
			<-timer.C

			log.Println("üîÑ Hourly restart triggered")

			// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
			if err := startNewServerInstance(); err != nil {
				log.Printf("‚ùå Failed to restart server: %v", err)
			}

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å
			timer.Reset(time.Hour)
			//timer.Reset(time.Minute)
		}
	}()
}

func (s *ServerInstance) gracefulShutdown() {
	log.Println("üõë Starting graceful shutdown of server instance...")

	// –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–∏–µ–º –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	atomic.StoreInt32(&s.isAcceptingReqs, 0)

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	time.Sleep(500 * time.Millisecond)

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
	ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
	defer cancel()

	if err := s.httpServer.Shutdown(ctx); err != nil {
		log.Printf("‚ùå HTTP server shutdown error: %v", err)
		s.httpServer.Close()
	}

	// –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
	s.cleanup()

	close(s.shutdownComplete)
	log.Println("‚úÖ Server instance shutdown complete")
}

func (s *ServerInstance) cleanup() {
	if s.cache != nil {
		s.cache.Close()
	}

	if s.batchPurchase != nil {
		s.batchPurchase.Close()
	}

	if s.saleItemsRepo != nil {
		s.saleItemsRepo.Close()
	}

	if s.batchInserter != nil {
		s.batchInserter.Close()
	}

	if s.checkoutRepo != nil {
		s.checkoutRepo.Close()
	}
}

func (s *ServerInstance) isAcceptingRequests() bool {
	return atomic.LoadInt32(&s.isAcceptingReqs) == 1
}

func (s *ServerInstance) checkoutHandler(w http.ResponseWriter, r *http.Request) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª–∏ –º—ã –∑–∞–ø—Ä–æ—Å—ã
	if !s.isAcceptingRequests() {
		w.WriteHeader(http.StatusServiceUnavailable)
		return
	}

	// –≠—Ç–∞–ø 0: –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
	if r.Method != http.MethodPost {
		w.WriteHeader(http.StatusMethodNotAllowed)
		return
	}

	queryParams, err := url.ParseQuery(r.URL.RawQuery)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	userIDStr := queryParams.Get("user_id")
	itemIDStr := queryParams.Get("item_id")

	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ userID –≤ int64
	userID, err := strconv.ParseInt(userIDStr, 10, 64)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ itemID –≤ int64
	itemID, err := strconv.ParseInt(itemIDStr, 10, 64)
	if err != nil || itemID < 0 || itemID >= 10_000 {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	// –≠—Ç–∞–ø 1: —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–µ—à–µ
	checkout, err := s.cache.Checkout(userID, itemID)
	if err != nil {
		w.WriteHeader(http.StatusConflict)
		return
	}

	// –≠—Ç–∞–ø 2: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ë–î
	record := db.CheckoutRecord{
		UserID:    userID,
		ItemID:    itemID,
		Code:      checkout.Code,
		CreatedAt: checkout.CreatedAt,
		ExpiresAt: checkout.ExpiresAt,
	}

	if err := s.batchInserter.Add(record); err != nil {
		s.cache.DeleteCheckout(checkout.Code)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Header().Set("Content-Type", "text/plain")
	fmt.Fprintf(w, "%s", checkout.Code)
}

func (s *ServerInstance) purchaseHandler(w http.ResponseWriter, r *http.Request) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª–∏ –º—ã –∑–∞–ø—Ä–æ—Å—ã
	if !s.isAcceptingRequests() {
		w.WriteHeader(http.StatusServiceUnavailable)
		return
	}

	// –≠—Ç–∞–ø 0: –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
	if r.Method != http.MethodPost {
		w.WriteHeader(http.StatusMethodNotAllowed)
		return
	}

	queryParams, err := url.ParseQuery(r.URL.RawQuery)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	codeStr := queryParams.Get("code")

	// –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤ UUID
	code, err := uuid.Parse(codeStr)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	// –≠—Ç–∞–ø 1: –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –≤ –∫–µ—à–µ
	checkout, success := s.cache.TryPurchase(code)
	if !success {
		w.WriteHeader(http.StatusConflict)
		return
	}

	// –≠—Ç–∞–ø 2: –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –≤ –ë–î
	err = s.batchPurchase.Purchase(s.saleID, checkout.LotIndex, checkout.UserID)
	if err != nil {
		// –æ—Ç–∫–∞—Ç –ø–æ–∫—É–ø–∫–∏ –≤ –∫–µ—à–µ
		s.cache.RollbackPurchase(code)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	// –≠—Ç–∞–ø 3: –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É –≤ –∫–µ—à–µ
	s.cache.ConfirmPurchase(code)

	w.WriteHeader(http.StatusOK)
	w.Header().Set("Content-Type", "text/plain")
}
